name: "Update Manifest and Commit Changes"
description: "Checks out the repository, sets up Node, installs dependencies, updates manifest.json, formats, and commits/pushes changes signing the commit."
inputs:
  manifestPath:
    description: "The path to the manifest.json file."
    required: false
    default: "${{ github.workspace }}/manifest.json"
  schemaPath:
    description: "The path to the plugin settings schema."
    required: false
    default: "${{ github.workspace }}/src/types/plugin-input.ts"
  pluginEntry:
    description: "The path to the plugin entry file."
    required: false
    default: "${{ github.workspace }}/src/index.ts"
  commitMessage:
    description: "The commit message."
    required: false
    default: "chore: updated manifest.json and dist build"
  nodeVersion:
    description: "The version of Node.js to use."
    default: "20.10.0"
  treatAsEsm:
    description: "If the package is set to be treated as ESM, it will replace __dirname occurrences."
    default: false
  sourcemap:
    description: "Generates the sourcemap for the compiled files"
outputs: {}
runs:
  using: "composite"
  steps:
    - name: Check out the repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.nodeVersion }}

    - uses: oven-sh/setup-bun@v2

    - name: Install dependencies
      shell: bash
      run: |
        bun install --frozen-lockfile

    - name: Build project
      shell: bash
      run: |
        bun add -DE @vercel/ncc
        echo "Compiling plugin..."
        bun ncc build ${{ inputs.pluginEntry }} --external "./tests" -m ${{ inputs.sourcemap == 'true' && '-s' || '' }} -o dist
        echo "Compiling plugin types..."
        bun ncc build ${{ inputs.schemaPath }} --external "./tests" -m -o plugin

    - name: Replace __dirname with import.meta.dirname
      if: ${{ inputs.treatAsEsm }}
      shell: bash
      run: |
        if [ "${{ inputs.treatAsEsm }}" = "true" ]; then
          sed -i 's/__dirname/import.meta.dirname/g' "${{ github.workspace }}/dist/index.js"
        fi

    - name: Update manifest configuration JSON
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs').promises;
          const path = require('path');

          async function updateManifest() {
            const manifestPath = '${{ inputs.manifestPath }}';
            const pluginPath = path.resolve('${{ github.workspace }}', 'plugin', 'index.js');

            let pluginSettingsSchema;
            try {
              // First, try to load as ESM
              try {
                const pluginModule = await import(`file://${pluginPath}`);
                pluginSettingsSchema = pluginModule.pluginSettingsSchema;

                if (!pluginSettingsSchema) {
                  throw new Error('pluginSettingsSchema not found in the ESM module');
                }
              } catch (esmError) {
                // If ESM import fails, try loading as CJS
                try {
                  const pluginModule = require(pluginPath);
                  pluginSettingsSchema = pluginModule.pluginSettingsSchema;

                  if (!pluginSettingsSchema) {
                    throw new Error('pluginSettingsSchema not found in the CJS module');
                  }
                } catch (cjsError) {
                  console.error('Error loading module as ESM and CJS:', esmError, cjsError);
                  process.exit(1);
                }
              }
            } catch (error) {
              console.error('Error loading module:', error);
              process.exit(1);
            }

            const manifest = JSON.parse(await fs.readFile(manifestPath, 'utf8'));
            manifest["configuration"] = pluginSettingsSchema;

            function customReviver(key, value) {
              if (typeof value === "object" && value !== null) {
                if ("properties" in value && "required" in value) {
                  const requiredFields = new Set(value.required);
                  for (const [propKey, propValue] of Object.entries(value.properties)) {
                    if (typeof propValue === 'object' && 'default' in propValue) {
                      requiredFields.delete(propKey);
                    }
                  }
                  value.required = Array.from(requiredFields);
                  if (value.required.length === 0) {
                    delete value.required;
                  }
                }

                // Recursively apply to nested objects and arrays
                if (Array.isArray(value)) {
                  return value.map(item => JSON.parse(JSON.stringify(item), customReviver));
                } else {
                  return Object.fromEntries(
                    Object.entries(value).map(([k, v]) => [k, JSON.parse(JSON.stringify(v), customReviver)])
                  );
                }
              }
              return value;
            }

            const updatedManifest = JSON.stringify(manifest, customReviver, 2);
            await fs.writeFile(manifestPath, updatedManifest, 'utf8');
          }
          updateManifest();

    - name: Format manifest using Prettier
      shell: bash
      run: |
        bun add -DE prettier
        bun prettier --write .

    - name: Get GitHub App token
      if: env.APP_ID != '' && env.APP_PRIVATE_KEY != ''
      uses: tibdex/github-app-token@v1.7.0
      id: get_installation_token
      with:
        app_id: ${{ env.APP_ID }}
        private_key: ${{ env.APP_PRIVATE_KEY }}

    - name: Configure Git
      shell: bash
      run: |
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"

    - name: Update manifest.json and dist folder
      shell: bash
      env:
        GITHUB_TOKEN: ${{ steps.get_installation_token.outputs.token || github.token }}
      run: |
        # Create new empty directory
        TEMP_DIR=$(mktemp -d)
        cd "$TEMP_DIR"
        
        # Initialize git directory (not a repo)
        mkdir .git
        git init --bare
        
        # Ensure we exit on any error
        set -e

        # Helper functions
        create_blob() {
          local file="$1"
          if [ ! -f "$file" ]; then
            echo "Error: File not found - $file" >&2
            return 1
          fi
          git hash-object -w "$file"
        }

        echo "Setting up git environment..."
        mkdir -p .git/objects .git/refs

        echo "Processing manifest file..."
        MANIFEST_BLOB=$(create_blob "${{ github.workspace }}/${{ inputs.manifestPath }}")
        echo "Manifest blob: $MANIFEST_BLOB"

        # Create dist directory entries
        echo "Processing dist files..."
        mkdir -p dist
        cp -r "${{ github.workspace }}/dist/"* dist/

        # First create blobs for all dist files
        echo "Creating file blobs..."
        while IFS= read -r -d $'\0' file; do
          rel_path="${file#./dist/}"
          blob_hash=$(create_blob "$file")
          # Use printf with tab delimiter to ensure proper spacing
          printf "100644 blob %s\t%s\n" "$blob_hash" "$rel_path" >> dist_entries
        done < <(find ./dist -type f -print0 | sort -z)

        # Create dist tree
        echo "Creating dist tree..."
        DIST_TREE=$(cat dist_entries | git mktree)
        echo "Dist tree: $DIST_TREE"

        # Create root tree with proper spacing
        echo "Creating root tree..."
        printf "040000 tree %s\tdist\n100644 blob %s\tmanifest.json\n" "$DIST_TREE" "$MANIFEST_BLOB" | git mktree > root_tree
        ROOT_TREE=$(cat root_tree)
        echo "Root tree: $ROOT_TREE"

        # Try to get parent commit
        echo "Checking for parent commit..."
        cd "${{ github.workspace }}"
        PARENT=""
        if git fetch origin "${{ github.ref_name }}" 2>/dev/null; then
          PARENT=$(git rev-parse FETCH_HEAD)
          echo "Found parent commit: $PARENT"
        else
          echo "No parent commit found, creating new history"
        fi
        cd "$TEMP_DIR"

        # Create commit
        echo "Creating commit..."
        if [ -n "$PARENT" ]; then
          COMMIT=$(echo "${{ inputs.commitMessage }}" | git commit-tree "$ROOT_TREE" -p "$PARENT")
        else
          COMMIT=$(echo "${{ inputs.commitMessage }}" | git commit-tree "$ROOT_TREE")
        fi
        echo "Created commit: $COMMIT"
        
        # Update the branch
        echo "Pushing to ${{ github.ref_name }}..."
        cd "${{ github.workspace }}"
        git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git"
        git push origin "$COMMIT:refs/heads/${{ github.ref_name }}" --force

        echo "Cleaning up..."
        rm -rf "$TEMP_DIR"
        echo "Done!"
